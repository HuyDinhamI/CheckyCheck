/**
 * game.js - Qu·∫£n l√Ω logic ch√≠nh c·ªßa game Emotion Challenge
 */

const Game = {
    // C·∫•u h√¨nh game
    config: {
        preparationTime: 3, // Th·ªùi gian chu·∫©n b·ªã (gi√¢y)
        levelTime: 30, // Th·ªùi gian cho m·ªói m√†n (gi√¢y)
        minDetectionThreshold: 90, // Ng∆∞·ª°ng nh·∫≠n di·ªán t·ªëi thi·ªÉu ƒë·ªÉ v∆∞·ª£t qua m√†n ch∆°i (%)
        detectionSuccessTime: 2, // Th·ªùi gian duy tr√¨ nh·∫≠n di·ªán th√†nh c√¥ng (gi√¢y)
    },
    
    // Tr·∫°ng th√°i game
    state: {
        isPlaying: false,
        currentLevel: 1,
        totalLevels: 5,
        timeRemaining: 0,
        timerInterval: null,
        levelStartTime: 0,
        detectionSuccess: false,
        successStartTime: 0,
        accuracyHistory: [],
    },
    
    // Danh s√°ch c√°c m√†n ch∆°i
    levels: [
        { emotion: 'happy', label: 'Vui V·∫ª', icon: 'üòä', instruction: 'H√£y c∆∞·ªùi th·∫≠t t∆∞∆°i!' },
        { emotion: 'surprise', label: 'Ng·∫°c Nhi√™n', icon: 'üò≤', instruction: 'H√£y t·ªè ra b·∫•t ng·ªù!' },
        { emotion: 'sad', label: 'Bu·ªìn B√£', icon: 'üò¢', instruction: 'H√£y t·ªè ra bu·ªìn b√£!' },
        { emotion: 'angry', label: 'Gi·∫≠n D·ªØ', icon: 'üò†', instruction: 'H√£y th·ªÉ hi·ªán s·ª± t·ª©c gi·∫≠n!' },
        { emotion: 'fear', label: 'S·ª£ H√£i', icon: 'üò®', instruction: 'H√£y th·ªÉ hi·ªán s·ª± s·ª£ h√£i!' },
    ],
    
    // Kh·ªüi t·∫°o game
    async init() {
        // Kh·ªüi t·∫°o Emotion Detector
        const initialized = await EmotionDetector.init();
        if (!initialized) {
            alert('Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán c·∫£m x√∫c. Vui l√≤ng th·ª≠ l·∫°i sau.');
            return false;
        }
        
        return true;
    },
    
    // B·∫Øt ƒë·∫ßu giai ƒëo·∫°n chu·∫©n b·ªã
    async startPreparation() {
        // ƒê·∫∑t l·∫°i tr·∫°ng th√°i
        this.resetState();
        
        // C·∫≠p nh·∫≠t th√¥ng tin m√†n ch∆°i
        UI.updateLevelInfo(this.state.currentLevel, this.state.totalLevels);
        
        try {
            // Thi·∫øt l·∫≠p camera
            const cameraReady = await EmotionDetector.setupCamera(UI.elements.video);
            if (!cameraReady) {
                alert('Kh√¥ng th·ªÉ truy c·∫≠p camera. Vui l√≤ng c·∫•p quy·ªÅn v√† th·ª≠ l·∫°i.');
                UI.showScreen('welcome');
                return;
            }
            
            // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c chu·∫©n b·ªã
            UI.startCountdown(this.config.preparationTime, () => {
                this.startLevel();
            });
        } catch (error) {
            console.error('Error during preparation:', error);
            alert('ƒê√£ x·∫£y ra l·ªói khi chu·∫©n b·ªã. Vui l√≤ng th·ª≠ l·∫°i.');
            UI.showScreen('welcome');
        }
    },
    
    // B·∫Øt ƒë·∫ßu m√†n ch∆°i
    startLevel() {
        const currentLevelData = this.levels[this.state.currentLevel - 1];
        
        // Chuy·ªÉn sang m√†n h√¨nh ch∆°i game
        UI.showScreen('game');
        
        // C·∫≠p nh·∫≠t th√¥ng tin m√†n ch∆°i
        UI.updateTargetEmotion(currentLevelData.label, currentLevelData.icon);
        
        // Thi·∫øt l·∫≠p camera cho m√†n ch∆°i
        EmotionDetector.setupCamera(UI.elements.gameVideo).then(() => {
            // Kh·ªüi t·∫°o th·ªùi gian
            this.state.timeRemaining = this.config.levelTime;
            this.state.levelStartTime = Date.now();
            UI.updateTimer(this.state.timeRemaining);
            
            // B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán c·∫£m x√∫c
            EmotionDetector.startDetection(
                UI.elements.gameVideo,
                UI.elements.gameCanvas,
                currentLevelData.emotion,
                this.handleDetectionResult.bind(this)
            );
            
            // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian
            this.state.isPlaying = true;
            this.state.timerInterval = setInterval(() => {
                this.updateGameTimer();
            }, 1000);
        });
    },
    
    // X·ª≠ l√Ω k·∫øt qu·∫£ nh·∫≠n di·ªán c·∫£m x√∫c
    handleDetectionResult(result) {
        if (!this.state.isPlaying) return;
        
        if (result.faceDetected) {
            // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh nh·∫≠n di·ªán
            UI.updateDetectionProgress(result.targetMatching);
            
            // Ki·ªÉm tra xem ƒë√£ ƒë·∫°t ng∆∞·ª°ng th√†nh c√¥ng ch∆∞a
            if (result.targetMatching >= this.config.minDetectionThreshold) {
                if (!this.state.detectionSuccess) {
                    // B·∫Øt ƒë·∫ßu t√≠nh th·ªùi gian duy tr√¨ c·∫£m x√∫c th√†nh c√¥ng
                    this.state.detectionSuccess = true;
                    this.state.successStartTime = Date.now();
                } else {
                    // Ki·ªÉm tra xem ƒë√£ duy tr√¨ ƒë·ªß l√¢u ch∆∞a
                    const successDuration = (Date.now() - this.state.successStartTime) / 1000;
                    if (successDuration >= this.config.detectionSuccessTime) {
                        // Ho√†n th√†nh m√†n ch∆°i
                        this.completeLevel(result.targetMatching);
                    }
                }
            } else {
                // ƒê·∫∑t l·∫°i tr·∫°ng th√°i th√†nh c√¥ng n·∫øu kh√¥ng ƒë·∫°t ng∆∞·ª°ng
                this.state.detectionSuccess = false;
            }
        } else {
            // ƒê·∫∑t l·∫°i tr·∫°ng th√°i th√†nh c√¥ng n·∫øu kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t
            this.state.detectionSuccess = false;
            UI.updateDetectionProgress(0);
        }
    },
    
    // C·∫≠p nh·∫≠t ƒë·∫øm ng∆∞·ª£c th·ªùi gian
    updateGameTimer() {
        this.state.timeRemaining--;
        UI.updateTimer(this.state.timeRemaining);
        
        if (this.state.timeRemaining <= 0) {
            // H·∫øt th·ªùi gian
            this.gameOver();
        }
    },
    
    // Ho√†n th√†nh m√†n ch∆°i
    completeLevel(accuracy) {
        // D·ª´ng game
        this.pauseGame();
        
        // L∆∞u ƒë·ªô ch√≠nh x√°c
        this.state.accuracyHistory.push(Math.round(accuracy));
        
        const currentLevelData = this.levels[this.state.currentLevel - 1];
        
        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ m√†n ch∆°i
        UI.updateLevelComplete(
            currentLevelData.label,
            currentLevelData.icon,
            Math.round(accuracy)
        );
        
        // Chuy·ªÉn sang m√†n h√¨nh ho√†n th√†nh
        UI.showScreen('level-complete');
    },
    
    // Chuy·ªÉn sang m√†n ti·∫øp theo
    nextLevel() {
        // TƒÉng m√†n ch∆°i
        this.state.currentLevel++;
        
        // Ki·ªÉm tra xem ƒë√£ ho√†n th√†nh t·∫•t c·∫£ ch∆∞a
        if (this.state.currentLevel > this.state.totalLevels) {
            this.completeGame();
            return;
        }
        
        // B·∫Øt ƒë·∫ßu m√†n ch∆°i m·ªõi
        this.startPreparation();
    },
    
    // Ho√†n th√†nh to√†n b·ªô game
    completeGame() {
        // T√≠nh th·ªùi gian ho√†n th√†nh
        const totalTime = Math.round((Date.now() - this.state.levelStartTime) / 1000) + 
                         (this.config.levelTime * (this.state.totalLevels - 1));
        
        // T√≠nh ƒë·ªô ch√≠nh x√°c trung b√¨nh
        const averageAccuracy = Math.round(
            this.state.accuracyHistory.reduce((sum, acc) => sum + acc, 0) / 
            this.state.accuracyHistory.length
        );
        
        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ cu·ªëi c√πng
        UI.updateFinalResults(totalTime, averageAccuracy);
        
        // Chuy·ªÉn sang m√†n h√¨nh ho√†n th√†nh game
        UI.showScreen('game-complete');
        
        // D·ª´ng camera
        EmotionDetector.stopCamera();
    },
    
    // Game over (h·∫øt th·ªùi gian)
    gameOver() {
        // D·ª´ng game
        this.pauseGame();
        
        // C·∫≠p nh·∫≠t th√¥ng tin game over
        UI.updateGameOver(this.state.currentLevel - 1, this.state.totalLevels);
        
        // Chuy·ªÉn sang m√†n h√¨nh game over
        UI.showScreen('game-over');
        
        // D·ª´ng camera
        EmotionDetector.stopCamera();
    },
    
    // T·∫°m d·ª´ng game
    pauseGame() {
        this.state.isPlaying = false;
        
        // X√≥a interval ƒë·∫øm ng∆∞·ª£c
        if (this.state.timerInterval) {
            clearInterval(this.state.timerInterval);
            this.state.timerInterval = null;
        }
        
        // D·ª´ng nh·∫≠n di·ªán
        EmotionDetector.stopDetection();
    },
    
    // ƒê·∫∑t l·∫°i tr·∫°ng th√°i game
    resetState() {
        this.state.isPlaying = false;
        this.state.currentLevel = 1;
        this.state.timeRemaining = this.config.levelTime;
        this.state.timerInterval = null;
        this.state.levelStartTime = 0;
        this.state.detectionSuccess = false;
        this.state.successStartTime = 0;
        this.state.accuracyHistory = [];
        
        // D·ª´ng nh·∫≠n di·ªán v√† camera n·∫øu ƒëang ch·∫°y
        EmotionDetector.stopDetection();
        EmotionDetector.stopCamera();
    },
    
    // Reset game ho√†n to√†n
    reset() {
        this.resetState();
    }
};
